% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/processing.R
\name{run_qgis}
\alias{run_qgis}
\title{Interface to QGIS commands}
\usage{
run_qgis(alg = NULL, params = NULL, check_params = TRUE,
  qgis_env = set_env())
}
\arguments{
\item{alg}{Name of the GIS function to be used (see 
\code{\link{find_algorithms}}).}

\item{params}{A list of geoalgorithm function arguments that should be used 
in conjunction with the selected (Q)GIS function (see 
\code{\link{get_args_man}}). Please make sure that you provide all function
arguments in the correct order. To make sure this is the case, it is 
recommended to use the convenience function \code{\link{get_args_man}}.}

\item{check_params}{If \code{TRUE} (default), it will be checked if all 
geoalgorithm function arguments were provided in the correct order.}

\item{qgis_env}{Environment containing all the paths to run the QGIS API. For
more information, refer to \code{\link{set_env}}.}
}
\description{
\code{run_qgis} calls QGIS algorithms from within R while 
  passing the corresponding function arguments.
}
\details{
This workhorse function calls QGIS via Python (QGIS API) using the 
  command line. Specifically, it calls \code{processing.runalg}.
}
\note{
GRASS users do not have to specify manually the GRASS region extent
  (function argument GRASS_REGION_PARAMETER). If "None", \code{run_qgis} will
  automatically retrieve the region extent based on the input layers.
}
\examples{
\dontrun{
# set the environment
my_env <- set_env()
# find out how a function is called
find_algorithms(search_term = "add", qgis_env = my_env)
# specify parameters
params <- get_args_man("saga:addcoordinatestopoints", qgis_env = qgis_env)
params$INPUT <- "random_squares.shp"
params$OUTPUT <- "output.shp"
run_qgis(alg = "saga:addcoordinatestopoints",
         params = params,
         qgis_env = my_env)
}
}
\author{
Jannes Muenchow, QGIS developer team
}

